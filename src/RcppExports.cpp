// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// exact_search
std::vector<int> exact_search(const std::vector<std::string>& vec, const std::vector<std::string>& patterns, int max_error = 1, bool verbose = true);
RcppExport SEXP tcR_exact_search(SEXP vecSEXP, SEXP patternsSEXP, SEXP max_errorSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const std::vector<std::string>& >::type vec(vecSEXP );
        Rcpp::traits::input_parameter< const std::vector<std::string>& >::type patterns(patternsSEXP );
        Rcpp::traits::input_parameter< int >::type max_error(max_errorSEXP );
        Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP );
        std::vector<int> __result = exact_search(vec, patterns, max_error, verbose);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// exact_search_list
List exact_search_list(const std::vector<std::string>& vec, const List patterns_list, int max_error = 1, bool verbose = true);
RcppExport SEXP tcR_exact_search_list(SEXP vecSEXP, SEXP patterns_listSEXP, SEXP max_errorSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const std::vector<std::string>& >::type vec(vecSEXP );
        Rcpp::traits::input_parameter< const List >::type patterns_list(patterns_listSEXP );
        Rcpp::traits::input_parameter< int >::type max_error(max_errorSEXP );
        Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP );
        List __result = exact_search_list(vec, patterns_list, max_error, verbose);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// hamming_search
std::vector<int> hamming_search(const std::vector<std::string>& vec, const std::vector<std::string>& patterns, int max_error = 1, bool verbose = true);
RcppExport SEXP tcR_hamming_search(SEXP vecSEXP, SEXP patternsSEXP, SEXP max_errorSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const std::vector<std::string>& >::type vec(vecSEXP );
        Rcpp::traits::input_parameter< const std::vector<std::string>& >::type patterns(patternsSEXP );
        Rcpp::traits::input_parameter< int >::type max_error(max_errorSEXP );
        Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP );
        std::vector<int> __result = hamming_search(vec, patterns, max_error, verbose);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// levenshtein_search
std::vector<int> levenshtein_search(const std::vector<std::string>& vec, const std::vector<std::string>& patterns, int max_error = 1, bool verbose = true);
RcppExport SEXP tcR_levenshtein_search(SEXP vecSEXP, SEXP patternsSEXP, SEXP max_errorSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const std::vector<std::string>& >::type vec(vecSEXP );
        Rcpp::traits::input_parameter< const std::vector<std::string>& >::type patterns(patternsSEXP );
        Rcpp::traits::input_parameter< int >::type max_error(max_errorSEXP );
        Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP );
        std::vector<int> __result = levenshtein_search(vec, patterns, max_error, verbose);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
